package ru.leetcode.algorithms.x_of_a_kind_in_a_deck_of_cards_914;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static java.lang.Math.max;

/**
 * 914. X of a Kind in a Deck of Cards
 * Easy
 * Topics
 * Companies
 * You are given an integer array deck where deck[i] represents the number written on the ith card.
 * <p>
 * Partition the cards into one or more groups such that:
 * <p>
 * Each group has exactly x cards where x > 1, and
 * All the cards in one group have the same integer written on them.
 * Return true if such partition is possible, or false otherwise.
 * <p>
 * –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ deck, –≥–¥–µ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å deck[i] –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –Ω–∞ –∫–∞—Ä—Ç–µ.
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
 * —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã:
 * <p>
 * –í –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –±—ã–ª–æ —Ä–æ–≤–Ω–æ x –∫–∞—Ä—Ç, –≥–¥–µ
 * -> ùë• > 1
 * -> x > 1.
 * -> –í—Å–µ –∫–∞—Ä—Ç—ã –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–º–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ.
 * –ï—Å–ª–∏ —Ç–∞–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å true, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å false.
 */
public class Solution {

    public static void main(String[] args) {
        new Solution().hasGroupsSizeX(
                new int[]{1,2,3,4,4,3,2,1}
        );
    }

    public boolean hasGroupsSizeX(int[] decks) {

        boolean answer = false;

//        Map<Integer, Integer> countMap = new HashMap<>();
//
//        for (int deck : decks) {
//            countMap.put(deck, countMap.getOrDefault(deck, 0) + 1);
//        }

//        countMap.forEach((key, value) ->
//                System.out.println("–ó–Ω–∞—á–µ–Ω–∏–µ " + key + " –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è " + value + " —Ä–∞–∑(–∞)")
//        );

        Map<Integer, Long> countMap = Arrays.stream(decks)
                .boxed() // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º int[] –≤ Stream<Integer>
                .collect(Collectors.groupingBy(e -> e, Collectors.counting()));

        int maxCountNumber = countMap.values().stream().max(Long::compareTo).orElseThrow().intValue();

        if(countMap.values().stream().filter(c -> c % maxCountNumber != 0).toList().isEmpty()){
            answer = true;
        }


        return answer;

    }
}